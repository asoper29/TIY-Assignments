// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed four million,
// find the sum of the even-valued terms.

// WORKING SOLUTION
//
// function solution(prev, cur){
//   var sum = 0;
//   for (cur = cur; cur < 4000000; cur = prev + cur){
//     console.log('prev is ', prev, ' and cur is ',cur)
//     prev = cur - prev;
//     if (cur % 2 === 0){
//       sum += cur;
//     }
//   }
//   return sum;
// }
//
// console.log(solution(1, 2));

function solution(){
  return {
    solveFor: function(limit){
      return this.sum(this.filterEvens(this.fibonacci(limit)));
    },

    // STORE VALUES OF FIBONACCI SEQUENCE IN AN ARRAY
    // (START WITH PREV AND CUR, CONTINUE LOOP WHILE CUR IS LESS THAN LIMIT )
    fibonacci: function(limit){
      var sequence = [1,2];
      var prev = 1, curr = 2, temp;
      if(limit < 3){
        return [ ];
      }
      while (prev + curr < limit){
        temp = prev + curr;
        prev = curr;
        curr = temp;
        sequence.push(temp)
      }
      return sequence;
    },

    // FILTERS THE EVEN NUMBERS OUT OF 'SEQ' ARRAY AND PUSHES THEM INTO 'EVEN' ARRAY
    filterEvens: function(seq){
      var even = [];
      seq.forEach(function(value) {
        if (value % 2 === 0){
          even.push(value);
        }
      })
      return even;
    },

    // FINDS THE SUM OF ALL NUMBERS IN 'EVEN' ARRAY
    sum: function(even){
      var sum = 0;
      even.forEach(function(value){
        sum += value
      })
      return sum;
    }
  }
}



// Test Solutions
var assert = require('chai').assert

var S = solution();

describe('Project Euler #2', function(){

  it('should have a function for doing this', function(){
    assert.isFunction(S.fibonacci);
    assert.deepEqual(S.fibonacci(0), [ ]);
  });
  it('should calculate fibonacci numbers for a small sample', function(){
    assert.deepEqual(S.fibonacci(5), [1,2,3]);
    assert.deepEqual(S.fibonacci(10), [1,2,3,5,8]);
    assert.deepEqual(S.fibonacci(20), [1,2,3,5,8,13]);
    assert.deepEqual(S.fibonacci(40), [1,2,3,5,8,13,21,34]);
  });
  describe('filterEvens', function(){
    it('should have a function for doing this', function(){
      assert.isFunction(S.filterEvens);
      assert.deepEqual(S.filterEvens([ ]), [ ]);
    });
    it('should filter out evens', function(){
      assert.deepEqual(S.filterEvens([1]), [ ]);
      assert.deepEqual(S.filterEvens([2]), [2]);
      assert.deepEqual(S.filterEvens([1,2]),[2]);
      assert.deepEqual(S.filterEvens([1,2,3]),[2]);
    });
  });
  describe('sum values in a list', function(){
    it('should have a function for doing this',function(){
      assert.isFunction(S.sum);
      assert.equal(S.sum([ ]), 0);
    });
    it('should sum items', function(){
      assert.equal(S.sum([1]), 1);
      assert.equal(S.sum([2]), 2);
      assert.equal(S.sum([1,1]), 2);
      assert.equal(S.sum([1,2]), 3);
    });
  });
  describe('solveFor', function(){
    it('should have a function for doing this', function(){
      assert.isFunction(S.solveFor);
    });
    it('should beable to solve simple examples', function(){
      assert.equal(S.solveFor(0), 0);
      assert.equal(S.solveFor(3), 2);
      assert.equal(S.solveFor(5), 2);
      assert.equal(S.solveFor(15), 10);
    });
    it('should calculate the final answer', function(){

      assert.equal(S.solveFor(4.0e6), 4613732);

    });
  });
});


// function test(limit, prev, cur){
//   var testFibo = solution().fibonacci(limit, prev, cur);
//   var testEven =  solution().filterEven(testFibo);
//   var testSum = solution().sumEven(testEven);
//   console.log(testFibo);
//   console.log(testEven);
//   console.log(testSum);
// }
//
// test(100,1,2);
// test(4000000,1,2);



// Fibonacci Sequence
//
// Two robots:
// Fibonacci
// input: Limit (100, 4 Mil)
// output: List of numbers
// Filter Even
// input: List of numbers
// output: List of numbers
// Sum
// input: List of numbers
// output: Number
//
