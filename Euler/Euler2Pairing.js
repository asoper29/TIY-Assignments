// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed four million,
// find the sum of the even-valued terms.



/* === PRODUCTION CODE === */
function solution(){
    return {

        fibonacci: function(limit, prev, cur){
          var fiboSeq = [];
          for (cur = cur; cur < limit; cur = prev + cur){
            prev = cur - prev;
            fiboSeq.push(cur);
          }
          return fiboSeq;
        },

        filterEvens: function(seq){
          var even = [];
          seq.forEach(function(value) {
            if (value % 2 === 0){
              even.push(value);
            }
          })
          return even;
        },

        sum: function(even){
          var sum = 0;
          even.forEach(function(value){
            sum += value
          })
          return sum;
        }
    }
}

/* === TEST CODE === */
console.log(solution().fibonacci(100, 1, 2));
console.log(solution().filterEvens(solution().fibonacci(100,1,2)))
console.log(solution().sum(solution().filterEvens(solution().fibonacci(100,1,2))))
